package com.bluedotinnovation.zone;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.bluedotinnovation.common.BDCommon;

/**
 * @author Bluedot Innovation
 * Copyright (c) 2016 Bluedot Innovation. All rights reserved.
 * Post Geofeature Sequence client demonstrates zones/sequence endpoint can be used to sequence/order the geofeatures in a Zone
 * to be used for triggering the Sequential condition using Apache HTTP client and JSON Simple libraries.
 */

public class PostGeofeatureSequence extends BDCommon {
	
	//This key is generated by Bluedot Point Access UI when your account is created.
	private static String bdCustomerApiKey    = "CUSTOMER_API_KEY_HERE";
	
	//This apiKey is generated when you create an application
	private static String bdApplicationApiKey = "APPLICATION_API_KEY_HERE";
	
	//This is the ID of the zone being updated.
	private static String bdZoneId            = "ZONE_ID_HERE";
	
	//An ordered list of fence and beacon identifiers to be used for the Sequence condition.
	private static String[] bdSequence        = { "FIRST_FENCE_ID_HERE", "SECOND_FENCE_ID_HERE"};
    
	private static String bdRestUrl       	  = "https://api.bluedotinnovation.com/1/zones/sequence";

	public static void main(String[] args) throws ParseException, IOException, KeyManagementException, NoSuchAlgorithmException {
		
		CloseableHttpClient httpRestClient = HttpClients.custom().setSSLSocketFactory(getSSLContextFactory()).build();
		
	    JSONParser parser    = new JSONParser();
	    JSONObject bdSequenceJSONObject = (JSONObject) parser.parse(getJsonSequenceGeofeatures()); //JSON of zone's geofeature sequence.

		HttpPost postRequest = new HttpPost(bdRestUrl);
		postRequest.addHeader("content-type", "application/json");
		postRequest.setEntity(new StringEntity(bdSequenceJSONObject.toJSONString(), Charset.defaultCharset()));
	 
	    HttpResponse response = httpRestClient.execute(postRequest);
	    	    	    
        if (response.getStatusLine().getStatusCode() == 200) {
        	System.out.println("The Geofeatures of the Zone have been ordered successfully.");
        	InputStream inputStream = response.getEntity().getContent();
        	byte[] bytes            = readStream(inputStream);
        	String resultString     = new String(bytes); //json result
        	JSONObject jsonResult   = (JSONObject)  parser.parse(resultString);
        	System.out.println(jsonResult);
        } else {
        	InputStream inputStream = response.getEntity().getContent();
        	byte[] bytes            = readStream(inputStream);
        	String resultString     = new String(bytes); //json error result
        	System.out.println(resultString);
        }			

	}

    
    /**/
	private static String getJsonSequenceGeofeatures() {
		return "{" +
	        "\"security\": {" +
		           "\"apiKey\":" + "\"" + bdApplicationApiKey + "\"," +
		           "\"customerApiKey\":" + "\"" + bdCustomerApiKey + "\"" +
	       "}," +
	       "\"content\": {" +
	           "\"zone\": {" +
	               "\"zoneId\":" + "\"" + bdZoneId + "\"," +
	               "\"sequence\": [ \"" + bdSequence[0] + "\",\"" + bdSequence[1] + "\"]"+
	           "}" +
	       "}" +
	   "}";
	}
}