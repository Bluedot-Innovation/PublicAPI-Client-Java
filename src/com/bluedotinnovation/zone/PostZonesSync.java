package com.bluedotinnovation.zone;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.bluedotinnovation.common.BDCommon;

/**
 * @author Bluedot Innovation
 * Copyright (c) 2016 Bluedot Innovation. All rights reserved.
 * The Post Zones Sync client demonstrates how the zones/sync endpoint can be used to sync the newly created, updated or deleted zones to
 * all mobile devices using your application.
 */

public class PostZonesSync extends BDCommon {
	
	public static void main(String[] args) throws ParseException, IOException, KeyManagementException, NoSuchAlgorithmException {
		
		String bdCustomerApiKey    = "CUSTOMER_API_KEY_HERE"; //This key is generated by Bluedot Point Access UI when your account is created.
		String bdApplicationApiKey = "APPLICATION_API_KEY_HERE"; //This apiKey is generated when you create an application
	    String bdRestUrl       	  = "https://api.bluedotinnovation.com/1/zones/sync";
	    
	    String zonesSyncJson = "{" +
		        "\"security\": {" +
                	"\"apiKey\":" + "\"" + bdApplicationApiKey + "\"," +
                	"\"customerApiKey\":" + "\"" + bdCustomerApiKey + "\"" +
                "}" +
            "}";
		
		CloseableHttpClient httpRestClient = HttpClients.custom().setSSLSocketFactory(getSSLContextFactory()).build();
		
	    JSONParser parser    = new JSONParser();
	    JSONObject bdZoneSyncJSONObject = (JSONObject) parser.parse(zonesSyncJson); //JSON of zones sync request

		HttpPost postRequest = new HttpPost(bdRestUrl);
		postRequest.addHeader("content-type", "application/json");
		postRequest.setEntity(new StringEntity(bdZoneSyncJSONObject.toJSONString(), Charset.defaultCharset()));
	 
	    HttpResponse response = httpRestClient.execute(postRequest);
	    	    	    
        if (response.getStatusLine().getStatusCode() == 200) {
        	InputStream inputStream = response.getEntity().getContent();
        	byte[] bytes            = readStream(inputStream);
        	String resultString     = new String(bytes); //json result
        	JSONObject jsonResult   = (JSONObject)  parser.parse(resultString);
        	System.out.println(jsonResult);
        } else {
        	InputStream inputStream = response.getEntity().getContent();
        	byte[] bytes            = readStream(inputStream);
        	String resultString     = new String(bytes); //json error result
        	System.out.println(resultString);
        }			

	}
}