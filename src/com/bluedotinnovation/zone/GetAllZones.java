/**
 * 
 */
package com.bluedotinnovation.zone;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.bluedotinnovation.common.BDCommon;

/**
 * @author Bluedot Innovation
 * Get zones client demonstrates the listing of zone names and ids for a given customer
 */
public class GetAllZones extends BDCommon
{
/**
	 * @param args
	 * @throws IOException 
	 * @throws ParseException
	 * @throws NoSuchAlgorithmException 
	 * @throws KeyManagementException 
	 */
	public static void main(String[] args) throws IOException, ParseException, KeyManagementException, NoSuchAlgorithmException
	{
		String bdCustomerApiKey    = "462dacf0-2316-11e6-a994-bc305bf60831"; //This key is generated by Bluedot Access UI when you register
		String bdApplicationApiKey = "6c36c440-2316-11e6-bd45-b8ca3a6b879d"; //This apiKey is generated when you create an application
		String bdRestUrl           = "https://api.bluedotinnovation.com/1/zones?customerApiKey=" +bdCustomerApiKey + "&apiKey=" + bdApplicationApiKey + "&pageNumber=0"; 
		

		CloseableHttpClient httpRestClient     = new DefaultHttpClient();

			httpRestClient = HttpClients.custom()
			    .setSSLSocketFactory(getSSLContextFactory())
			    .build();
			
		
		HttpGet request            = new HttpGet(bdRestUrl);
		HttpResponse httpResponse  = httpRestClient.execute(request);
		
		if (httpResponse.getStatusLine().getStatusCode() == 200){
			BufferedReader rd          = new BufferedReader (new InputStreamReader
                    (httpResponse.getEntity().getContent()));
			JSONParser parser          = new JSONParser();
			String bdZonesJson;
			while ((bdZonesJson = rd.readLine()) != null) 
			{
			     Object object                    = parser.parse(bdZonesJson);
			     JSONArray bdZonesJsonArry        = (JSONArray) object;
			     JSONObject zoneObject            =  (JSONObject) bdZonesJsonArry.get(0);
			     /*Zone name and id of the first zone from the array returned*/
			     System.out.println("Zone name : " + zoneObject.get("zoneName") + " Zone id: " + zoneObject.get("zoneId"));
			}
		}
		else{
			InputStream inputStream = httpResponse.getEntity().getContent();
        	byte[] bytes            = readStream(inputStream);
        	String resultString     = new String(bytes); //json error result
        	System.out.println(resultString);
		}
	}

}
